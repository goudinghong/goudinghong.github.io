#js基础

##掌握内容

----
	1,javascript的数据类型 （symbol）
	2，什么是变量？什么是变量提升 包含var和let
	3，标识符，关键字
	4，什么是常量
	5，类型之间的转换
	6，javascript的运算符
	7，运算符的优先级
	8，node中的输入和输出
	9，程序的顺序执行结构

###js的数据分类

>原始数据类型 和  引用数据类型
>>区别

	----
	>原始数据类型
	>
	>>1,简单的数据段
	>>2，存放的值(栈)
	>
	>引用数据类型
	>
	>>1,有多个值构成的对象
	>>2，存放的地址(堆)




- 原始数据类型 或 基本数据类型 6种

----
	1,undefined (1,申明未赋值，2，函数没有返回值)
	2,null （空，不存在）
	3,number	（数字，小数和整数）
	4,boolean （布尔值，true，false）	
	5,string （字符串，单引或双引表示）
	6，es6 symbol 原始数据类型  通过Symbol()去产生一个唯一的值，可以进行传参数Symbol('dd'),字符串类，不影响其值；作为属性值用
这是JavaScript最初实现的一个错误，后来被ECMAScript沿用下来。在今天我们可以解释为，null即是一个不存在的对象的占位符，但是在实际编码时还是要注意这一特性
ECMAScript认为undefined是从null派生出来的，所以把它们定义为相等的。但是，如果在一些情况下，我们一定要区分这两个值，那应该怎么办呢？可以使用下面的两种方法。
- 引用数据类型 或 复杂数据类型
 ----
	1，object  对象 对象是一个无序属性集，这里的“属性”可以是基本值、对象或者函数
	2，Array		数组
	3，function  函数
	5，object是所有引用类型父级

### 什么是变量？什么是变量提升？ var 和 let

我们写代码是为了给别人看，再次使用；
----
	1，当为内存的某个区域指定一个有意义的标识符时，该标识符就叫做变量，这样，在编写代码时，我们就不必关心变量所表示的内存的实际位置了。变量所代表的是某个内存区域，存储在这个内存区域的数据在程序运行时是可以改变的。也就是说变量的取值在程序运行时是可以改变的，所以称为“变”量  
	2，在es5中用var进行申明
	3，在es6中用let申明 
	4，区别在于作用范围
	var iname(变量名);	
		var -> 创建变量命令，告诉浏览器要创建一个新的变量
		iname -> 变量名(名字自己创建)
	

- 变量提升

----
	会把所有变量收集，并放在js开头位置。

### 标识符和关键字
>**标识符（identifier）**是用来识别具体对象的一个名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript语言的标识符对大小写敏感，所以a和A是两个不同的标识符。
>标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript引擎遇到非法标识符，就会报错。
>>命名规范:
>- 第一个字符可以是任意Unicode字母，以及美元符号（$）和下划线（_）。
>- 第二个字符及后面的字符，还可以用数字。
>
>>**合法**的标识符。
>![](images/identifier_01.bmp)  
>>
>>**不合法**的标识符。
>![](images/identifier_02.bmp) 
>
>>中文是合法的标识符,可以用作变量名(这种方式**不推荐**)
>![](images/identifier_03.bmp) 

命名规则：
	可以用字母,下划线和一些特殊符号组成
	>- 第一个字符可以是任意Unicode字母，以及美元符号（$）和下划线（_）。
	>- 第二个字符及后面的字符，还可以用数字。
	命名的三种方法：
	1，匈牙利命名法
		匈牙利命名法关键是：标识符的名字以一个或者多个小写字母开头作为前缀；前缀之后的是首字母大写的一个单词或多个单词组合，该单词要指明变量的用途。
		例：a_array o_object;
>![](images/m.png)  
	2，字母开头，驼峰命名法	
		例：avatarRunSpeed;
	3,帕斯卡命名法
		例:UserName;
区别第一个字母有没有大写
>>**关键字字(reserved word):在 JavaScript 中已经定义过的字,使用者不能再将这些字作为变量名使用**
>>>![](images/identifier_04.bmp) 
>另外，还有三个词虽然不是保留字，但是因为具有特别含义，也不应该用作标识符：Infinity、NaN、undefined。
	
###常量 es6
- const定义常量后，常量无法改变
- ---
	- 例
	- const a=6;
	- a=2;
	- console.log(a);

###类型之间的转换
	
	js提供了parseInt()和parseFloat()两个转换函数。前者把值转换成整数，后者把值转换成浮点数。String类型调用这些方法，这两个函数才能正确运行；如果遇到非数字，返回nan对其他类型返回的都是NaN(Not a Number)。
隐式转换
	1.字符串加数字,数字就会转成字符串。
	 
	2.数字减字符串，字符串转成数字。如果字符串不是纯数字就会转成NaN。字符串减数字也一样。两个字符串相减也先转成数字。
	 
	3.乘，除，大于，小于跟减的转换也是一样。
	 
	 
	//隐式转换 + - * == / 
	// + 
	10 + '20'    //2010
	// -
	10 - '20'    //-10
	10 - 'one'   //NaN
	10 - '100a'  //NaN
	// *
	10*'20'      //200
	'10'*'20'    //200
	// /
	20/'10'      //2
	'20'/'10'    //2
	'20'/'one'　 //NaN
	1.undefined等于null
	 
	2.字符串和数字比较时，字符串转数字
	 
	3.数字为布尔比较时，布尔转数字
	 
	4.字符串和布尔比较时，两者转数字
	 
	 
	// ==
	undefined == null;    //true
	'0' == 0;        　　  //true,字符串转数字
	0 == false;           //true,布尔转数字
	'0' == false;    　　　//true,两者转数字
	
###JavaScript的运算符
- 算术运算
![](images/ys.png)
> - 加法运算符（Addition）：x + y
> - 减法运算符（Subtraction）： x y
> - 乘法运算符（Multiplication）： x * y
> - 除法运算符（Division）：x / y
> 
> - 余数运算符（Remainder）：x % y
> - 自增运算符（Increment）：++x 或者 x++
> - 自减运算符（Decrement）：--x 或者 x--
> - 求负运算符（Negate）：-x
> - 数值运算符（Convert to number）： +x

- 赋值运算
![](images/fz.png)

- 比较运算

![](images/bjys.png)

- 逻辑运算

![](images/ljys.png)

- 条件运算

 ？ ：

###运算符的优先级
----
	指针最优，单目运算优于双目运算。如正负号。
	先乘除（模），后加减。
	先算术运算，后位运算。
	逻辑运算最后计算。
###nodejs输入和输出
安装readline-sync 模块 进行输入 console.log 输出
var readline = require("readline-sync");
console.log("请输入用户名");
var UserName = readline.question();
###程序顺序执行结构
----

	顺序结构的程序是严格按照程序中代码的先后执行的；如果有选择结构，就会根据具体条件
	执行相应的代码。循环结构中也会有条件判断，会根据不同的情况执行不同的代码的。有的
	还有交互技术，会根据使用者的要求或是外界的情况作出响应的。
